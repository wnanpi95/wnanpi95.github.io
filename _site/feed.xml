<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-07-18T21:33:51-07:00</updated><id>http://localhost:4000/</id><title type="html">William An</title><subtitle>My portfolio</subtitle><entry><title type="html">SDMTS Part 3 Real Time Data</title><link href="http://localhost:4000/SDMTS-Part-3/" rel="alternate" type="text/html" title="SDMTS Part 3 Real Time Data" /><published>2017-07-18T00:00:00-07:00</published><updated>2017-07-18T00:00:00-07:00</updated><id>http://localhost:4000/SDMTS-Part-3</id><content type="html" xml:base="http://localhost:4000/SDMTS-Part-3/">&lt;p&gt;This post will cover the process of scraping the data from SDMTS’s real time
feed, as well as explore the data a bit.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;important-links&quot;&gt;Important Links&lt;/h2&gt;
&lt;p&gt;This part has a supplemental python notebook, as well a couple sample scripts
that I used. They can all be found at the
&lt;a href=&quot;https://github.com/wnanpi95/SDMTS_DataAnalysis&quot;&gt;repo&lt;/a&gt; in the Part 3 folder.&lt;/p&gt;

&lt;p&gt;Additionally, the data from the feed comes in the protocol buffer format that
was created by google. I will talk a bit about protocol buffer in this post,
but &lt;a href=&quot;https://developers.google.com/protocol-buffers/&quot;&gt;here&lt;/a&gt; is a link to the
official documentation.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;SDMTS provides the end points to reach their data on their
&lt;a href=&quot;https://www.sdmts.com/business-center-developers/real-time-data&quot;&gt;developer&lt;/a&gt;
page. The feed we will be concerned with in this post and throughout the series
will be the vehicle position feed. Before you can have access to the feed, you
must request an api key, which can be sent via email submission from their 
website. Mine took roughly a week before they responded, so don’t get too 
worked up if you’re stuck waiting.&lt;/p&gt;

&lt;h2 id=&quot;protocol-buffer&quot;&gt;Protocol Buffer&lt;/h2&gt;
&lt;p&gt;The feed data is presented in the form of what is called a protocol buffer.
It is a language-independent data format, similiar to json. You can follow
the link above to google’s documentation to install the protobuf compiler,
which will allow you to take a protobuf template, and generate source code
in several supported languages, that will then allow you to read in pb files
and generate the objects.&lt;/p&gt;

&lt;p&gt;In the repo I already compiled the module for python in order to read in the pb
files we want, in this case the protobuf template comes from the GTFS real time
spec.&lt;/p&gt;

&lt;h2 id=&quot;file-download-and-parse&quot;&gt;File Download and Parse&lt;/h2&gt;
&lt;p&gt;The note book covers most of the details of this process. If you are interested
please take a look but nothing particularly interesting happens here.&lt;/p&gt;

&lt;p&gt;The script I have included I have running on a raspberry pi 3. I have it 
scheduled to scrape from the feed once a minute throughout the day. Because
the buses are not all updated consistently, this results in duplicate data,
which I remove using the other script.&lt;/p&gt;

&lt;h2 id=&quot;visualization&quot;&gt;Visualization&lt;/h2&gt;
&lt;p&gt;Here is a snapshot of all of the buses picked up by the feed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;real_time.png&quot; alt=&quot;alt text&quot; title=&quot;Created with ggmap&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;If you felt these first three parts were pretty dull please stick around!
These steps were necessary in order to set up the context for the next few 
parts. In part 4, we will begin to get our hands dirty with a bit of feature
engineering, and extract some interesting information out of our data.&lt;/p&gt;</content><author><name></name></author><summary type="html">This post will cover the process of scraping the data from SDMTS’s real time feed, as well as explore the data a bit.</summary></entry><entry><title type="html">SDMTS Part 2 Static Data Exploration</title><link href="http://localhost:4000/SDMTS-Part-2/" rel="alternate" type="text/html" title="SDMTS Part 2 Static Data Exploration" /><published>2017-07-18T00:00:00-07:00</published><updated>2017-07-18T00:00:00-07:00</updated><id>http://localhost:4000/SDMTS-Part-2</id><content type="html" xml:base="http://localhost:4000/SDMTS-Part-2/">&lt;p&gt;In this post, we will explore the contents of the data set, and see what 
we can do with it!&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;important-links&quot;&gt;Important Links&lt;/h2&gt;
&lt;p&gt;This post also has a supplemental R notebook. All of the code and the details
of the exploration can be found 
&lt;a href=&quot;https://github.com/wnanpi95/SDMTS_DataAnalysis&quot;&gt;there&lt;/a&gt; in the Part_2 folder.
In this post I will only summarize the findings and display some highlights.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The purpose of this post for me was to confirm my beliefs on what I thought
the data values represented. For you, hopefully it will give you a better
idea of how the data is mapped out through out this file system. Admittedly,
my first exploration of this data set occurred before I knew anything about
any RDBMS’s, and as a result was pretty painful. Hopefully with my summaries
and the commands to put everything into postgresql makes everything crystal
clear.&lt;/p&gt;

&lt;h2 id=&quot;mapping-out-a-single-trip&quot;&gt;Mapping out a single trip&lt;/h2&gt;
&lt;p&gt;To start out, we’ll begin by mapping out a single trip. All of the code and 
details can be found in the R notebook. The 30 route has a special place in my
heart, allowing me to surf every morning at 6 before class. Let’s begin by
looking at a trip along this route!&lt;/p&gt;

&lt;p&gt;The data we are going to need to plot this out are a trip_id, a list of 
stop_id’s and their coordinates, and a list of shape_pt’s and their 
coordinates. All of the data we need can be found in the shapes, stops,
stop_times, and trips files. After a bit of munging and using the ggmap api
we have the following map:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;route_30_trip.png&quot; alt=&quot;alt text&quot; title=&quot;Created with ggmap&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The black line represents the path taken by the trip and the red dots are all
of the stops along the way.&lt;/p&gt;

&lt;h2 id=&quot;places&quot;&gt;Places&lt;/h2&gt;
&lt;p&gt;In the places file is a list of primary locations that are currently services by
SDMTS. Let us take a look at its distribution on a map:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;places.png&quot; alt=&quot;alt text&quot; title=&quot;Created with ggmap&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The SDMTS system seems to extend out to cover a large region. However, there is
clearly a primary area of service, so let us take a closer look at that:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;places_primary.png&quot; alt=&quot;alt text&quot; title=&quot;Created with ggmap&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Unfortunately, the amount of interesting things that can be accomplished with 
this data alone is pretty limited. However, the code in notebook should help
you get a more solid idea of how that static data is conveyed and how to
extract useful ideas out of it. Moreover, this data serves as a necessary
context for making sense out of the live feed data. In Part 3, I will cover
the process I am using to gather data from the real time feed.&lt;/p&gt;</content><author><name></name></author><summary type="html">In this post, we will explore the contents of the data set, and see what we can do with it!</summary></entry><entry><title type="html">SDMTS Part 1 Static Data Preview</title><link href="http://localhost:4000/SDMTS-Part-1/" rel="alternate" type="text/html" title="SDMTS Part 1 Static Data Preview" /><published>2017-07-17T00:00:00-07:00</published><updated>2017-07-17T00:00:00-07:00</updated><id>http://localhost:4000/SDMTS-Part-1</id><content type="html" xml:base="http://localhost:4000/SDMTS-Part-1/">&lt;p&gt;In this series I will be looking at the data provided 
by the San Diego Metropolitan Transit System. This 
section will be a quick look at the static data, the
data that provides the schedule and route information. 
 &lt;!--more--&gt;&lt;/p&gt;
&lt;h2 id=&quot;important-links&quot;&gt;Important Links&lt;/h2&gt;
&lt;p&gt;The notebooks that supplement the series can be found
&lt;a href=&quot;https://github.com/wnanpi95/SDMTS_DataAnalysis&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All of the SDMTS data is available on their 
&lt;a href=&quot;https://www.sdmts.com/business-center/developers&quot;&gt;developer&lt;/a&gt;
page, although a key will have to be requested for 
access to their real time feed.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The SDMTS bus system has always held a special place in my
heart. Since I didn’t have a car throughout my UCSD career,
the buses provided the life line I needed to get away from
campus any time I needed.&lt;/p&gt;

&lt;p&gt;In this part, we will take a quick look through what sort
of information is available. The R notebook that supplements
this post can be found in the Part_1 folder of the repo.&lt;/p&gt;

&lt;p&gt;The static data set follows the GTFS spec established by 
google. A complete and thorough reference can be found on 
their &lt;a href=&quot;https://developers.google.com/transit/gtfs/&quot;&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This notebook will simply explore the most interesting 
sections of the data, as well as the part most relevant to
the later parts of the series. Let’s get started!&lt;/p&gt;

&lt;h2 id=&quot;the-files&quot;&gt;The Files&lt;/h2&gt;
&lt;p&gt;The static information comes in the form of fifteen files:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;del&gt;Agency&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Calendar Dates&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Calendar&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Fare Attributes&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Fare Rules&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Feed Info&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Frequencies&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;Place Patterns&lt;/li&gt;
  &lt;li&gt;Places&lt;/li&gt;
  &lt;li&gt;Routes&lt;/li&gt;
  &lt;li&gt;Shapes&lt;/li&gt;
  &lt;li&gt;Stop Times&lt;/li&gt;
  &lt;li&gt;Stops&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Transfers&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;Trips&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first seven files and transfers will be excluded from 
this analysis.All of the files come in the form of a csv. 
I will briefly summarize the data found in each file, as will 
be relevant to our use case. The exact information found in
each file can be explored in the notebook.&lt;/p&gt;

&lt;h3 id=&quot;places&quot;&gt;Places&lt;/h3&gt;
&lt;p&gt;This file provides a list of locations (think street corners
and prominent landmarks) by name, coordinates (latitude and
longitude). Each place is assigned a 6 character id, which
is used in the next file…&lt;/p&gt;
&lt;h3 id=&quot;place-patterns&quot;&gt;Place Patterns&lt;/h3&gt;
&lt;p&gt;The data here is subset by a route and direction. Each subset
consists of an ordered list of places (provided by id) visited
by each route-direction.&lt;/p&gt;
&lt;h3 id=&quot;routes&quot;&gt;Routes&lt;/h3&gt;
&lt;p&gt;Here we find the association between route number and it’s
long name (two locations that describe its range). In addition
we can also find here if the route travels in more than one
directions.&lt;/p&gt;
&lt;h3 id=&quot;shapes&quot;&gt;Shapes&lt;/h3&gt;
&lt;p&gt;In order to properly map the trips the bus takes, we need to
account for the roads that will be taken, as well as their
curvature. In this file, we find subsets defined by a shape id
which consists of three numbers separated by underscores. The
first number is the route associated with the shape id, while
the next two describe the direction and variation of the 
specific trip that it describes. Each subset consists of a 
sequence of coordinates, as well as the distance traveled
by the bus once it has reached that point in the trip.&lt;/p&gt;
&lt;h3 id=&quot;stops&quot;&gt;Stops&lt;/h3&gt;
&lt;p&gt;This file provides a list of bus stops, by name and 
coordinates, and assigns each stop an id, which is used in…&lt;/p&gt;
&lt;h3 id=&quot;stop-times&quot;&gt;Stop Times&lt;/h3&gt;
&lt;p&gt;We are first introduced to the concept of trip ids here. Each
trip id uniquely defines a combination of:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;route&lt;/li&gt;
  &lt;li&gt;direction&lt;/li&gt;
  &lt;li&gt;departure time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The rest of the file contains the arrival and departure time
at each stop, per trip.&lt;/p&gt;
&lt;h3 id=&quot;trips&quot;&gt;Trips&lt;/h3&gt;
&lt;p&gt;Here, each trip id is associated with all of the characteristics defined above.&lt;/p&gt;
&lt;h3 id=&quot;visualization-of-file-relations&quot;&gt;Visualization of file relations&lt;/h3&gt;
&lt;p&gt;The script to set up the postgresql database can be found in the repo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;Static_Info_Relation.png&quot; alt=&quot;alt text&quot; title=&quot;Created with pgadmin 3&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;I hope this was a clear summary of the kind of data we will be working with.
In the part 2, we will dive into the data a bit, to get a more concrete idea
of the data at hand.&lt;/p&gt;</content><author><name></name></author><summary type="html">In this series I will be looking at the data provided by the San Diego Metropolitan Transit System. This section will be a quick look at the static data, the data that provides the schedule and route information.</summary></entry></feed>